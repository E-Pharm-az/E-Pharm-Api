// <auto-generated />
using System;
using EPharm.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EPharm.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240710143926_PharmacyNullChanges")]
    partial class PharmacyNullChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EPharm.Infrastructure.Entities.Junctions.IndicationProduct", b =>
                {
                    b.Property<int>("IndicationId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("IndicationId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("IndicationProducts");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.Junctions.OrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Frequency")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int?>("SupplyDuration")
                        .HasColumnType("integer");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.Junctions.ProductActiveIngredient", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("ActiveIngredientId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId", "ActiveIngredientId");

                    b.HasIndex("ActiveIngredientId");

                    b.ToTable("ProductActiveIngredients");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.Junctions.ProductAllergy", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("AllergyId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "AllergyId");

                    b.HasIndex("AllergyId");

                    b.ToTable("ProductAllergies");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.Junctions.ProductDosageForm", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("DosageFormId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "DosageFormId");

                    b.HasIndex("DosageFormId");

                    b.ToTable("ProductDosageForms");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.Junctions.ProductRouteOfAdministration", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("RouteOfAdministrationId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "RouteOfAdministrationId");

                    b.HasIndex("RouteOfAdministrationId");

                    b.ToTable("ProductRouteOfAdministrations");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.Junctions.ProductSideEffect", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("SideEffectId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "SideEffectId");

                    b.HasIndex("SideEffectId");

                    b.ToTable("ProductSideEffects");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.Junctions.ProductUsageWarning", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("UsageWarningId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "UsageWarningId");

                    b.HasIndex("UsageWarningId");

                    b.ToTable("ProductUsageWarnings");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.Junctions.WarehouseProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseProduct");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.PharmaEntities.Pharmacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TIN")
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Pharmacy");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.PharmaEntities.PharmacyStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PharmacyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.ToTable("PharmacyStaff");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.ActiveIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.ToTable("ActiveIngredients");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.Allergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("PharmacyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.ToTable("Allergies");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.DosageForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("PharmacyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.ToTable("DosageForms");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.Indication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("PharmacyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.ToTable("Indications");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("integer");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("integer");

                    b.Property<string>("TrackingId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApprovedByAdminId")
                        .HasColumnType("text");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ContraindicationsDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("CostPerItem")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ManufacturingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxDayFrequency")
                        .HasColumnType("integer");

                    b.Property<int>("MaxSupplyDaysPeriod")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("PackagingWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("integer");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("RegulatoryInformationId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecialRequirementsId")
                        .HasColumnType("integer");

                    b.Property<string>("StorageConditionDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("StrengthMg")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("RegulatoryInformationId");

                    b.HasIndex("SpecialRequirementsId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.RegulatoryInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("date");

                    b.Property<string>("Certification")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.ToTable("RegulatoryInformations");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.RouteOfAdministration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("PharmacyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.ToTable("RouteOfAdministrations");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.SideEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("PharmacyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.ToTable("SideEffects");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.SpecialRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("MaximumAgeInMonthsRequirement")
                        .HasColumnType("integer");

                    b.Property<decimal>("MaximumWeighInKgRequirement")
                        .HasColumnType("numeric");

                    b.Property<string>("MedicalConditionsDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("MinimumAgeInMonthsRequirement")
                        .HasColumnType("integer");

                    b.Property<decimal>("MinimumWeighInKgRequirement")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OtherRequirementsDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.ToTable("SpecialRequirements");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.UsageWarning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("PharmacyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.ToTable("UsageWarnings");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("PharmaCompanyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PharmaCompanyId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.Junctions.IndicationProduct", b =>
                {
                    b.HasOne("EPharm.Infrastructure.Entities.ProductEntities.Indication", "Indication")
                        .WithMany("Products")
                        .HasForeignKey("IndicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPharm.Infrastructure.Entities.ProductEntities.Product", "Product")
                        .WithMany("Indications")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Indication");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.Junctions.OrderProduct", b =>
                {
                    b.HasOne("EPharm.Infrastructure.Entities.ProductEntities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPharm.Infrastructure.Entities.ProductEntities.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPharm.Infrastructure.Entities.ProductEntities.Warehouse", "Warehouse")
                        .WithMany("OrderProducts")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.Junctions.ProductActiveIngredient", b =>
                {
                    b.HasOne("EPharm.Infrastructure.Entities.ProductEntities.ActiveIngredient", "ActiveIngredient")
                        .WithMany("Products")
                        .HasForeignKey("ActiveIngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPharm.Infrastructure.Entities.ProductEntities.Product", "Product")
                        .WithMany("ActiveIngredients")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveIngredient");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.Junctions.ProductAllergy", b =>
                {
                    b.HasOne("EPharm.Infrastructure.Entities.ProductEntities.Allergy", "Allergy")
                        .WithMany("Products")
                        .HasForeignKey("AllergyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPharm.Infrastructure.Entities.ProductEntities.Product", "Product")
                        .WithMany("Allergies")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allergy");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.Junctions.ProductDosageForm", b =>
                {
                    b.HasOne("EPharm.Infrastructure.Entities.ProductEntities.DosageForm", "DosageForm")
                        .WithMany("Products")
                        .HasForeignKey("DosageFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPharm.Infrastructure.Entities.ProductEntities.Product", "Product")
                        .WithMany("DosageForms")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DosageForm");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.Junctions.ProductRouteOfAdministration", b =>
                {
                    b.HasOne("EPharm.Infrastructure.Entities.ProductEntities.Product", "Product")
                        .WithMany("RouteOfAdministrations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPharm.Infrastructure.Entities.ProductEntities.RouteOfAdministration", "RouteOfAdministration")
                        .WithMany("Products")
                        .HasForeignKey("RouteOfAdministrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("RouteOfAdministration");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.Junctions.ProductSideEffect", b =>
                {
                    b.HasOne("EPharm.Infrastructure.Entities.ProductEntities.Product", "Product")
                        .WithMany("SideEffects")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPharm.Infrastructure.Entities.ProductEntities.SideEffect", "SideEffect")
                        .WithMany("Products")
                        .HasForeignKey("SideEffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SideEffect");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.Junctions.ProductUsageWarning", b =>
                {
                    b.HasOne("EPharm.Infrastructure.Entities.ProductEntities.Product", "Product")
                        .WithMany("UsageWarnings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPharm.Infrastructure.Entities.ProductEntities.UsageWarning", "UsageWarning")
                        .WithMany("Products")
                        .HasForeignKey("UsageWarningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("UsageWarning");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.Junctions.WarehouseProduct", b =>
                {
                    b.HasOne("EPharm.Infrastructure.Entities.ProductEntities.Product", "Product")
                        .WithMany("Stock")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPharm.Infrastructure.Entities.ProductEntities.Warehouse", "Warehouse")
                        .WithMany("WarehouseProducts")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.PharmaEntities.PharmacyStaff", b =>
                {
                    b.HasOne("EPharm.Infrastructure.Entities.PharmaEntities.Pharmacy", "Pharmacy")
                        .WithMany("PharmacyStaff")
                        .HasForeignKey("PharmacyId");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.ActiveIngredient", b =>
                {
                    b.HasOne("EPharm.Infrastructure.Entities.PharmaEntities.Pharmacy", "Pharmacy")
                        .WithMany("ActiveIngredients")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.Allergy", b =>
                {
                    b.HasOne("EPharm.Infrastructure.Entities.PharmaEntities.Pharmacy", null)
                        .WithMany("Allergies")
                        .HasForeignKey("PharmacyId");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.DosageForm", b =>
                {
                    b.HasOne("EPharm.Infrastructure.Entities.PharmaEntities.Pharmacy", null)
                        .WithMany("DosageForms")
                        .HasForeignKey("PharmacyId");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.Indication", b =>
                {
                    b.HasOne("EPharm.Infrastructure.Entities.PharmaEntities.Pharmacy", null)
                        .WithMany("Indications")
                        .HasForeignKey("PharmacyId");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.Manufacturer", b =>
                {
                    b.HasOne("EPharm.Infrastructure.Entities.PharmaEntities.Pharmacy", "Pharmacy")
                        .WithMany("Manufacturers")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.Product", b =>
                {
                    b.HasOne("EPharm.Infrastructure.Entities.ProductEntities.Manufacturer", "Manufacturer")
                        .WithMany("Products")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPharm.Infrastructure.Entities.PharmaEntities.Pharmacy", "Pharmacy")
                        .WithMany("Products")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPharm.Infrastructure.Entities.ProductEntities.RegulatoryInformation", "RegulatoryInformation")
                        .WithMany("Product")
                        .HasForeignKey("RegulatoryInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPharm.Infrastructure.Entities.ProductEntities.SpecialRequirement", "SpecialRequirement")
                        .WithMany("Products")
                        .HasForeignKey("SpecialRequirementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");

                    b.Navigation("Pharmacy");

                    b.Navigation("RegulatoryInformation");

                    b.Navigation("SpecialRequirement");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.RegulatoryInformation", b =>
                {
                    b.HasOne("EPharm.Infrastructure.Entities.PharmaEntities.Pharmacy", "Pharmacy")
                        .WithMany("RegulatoryInformations")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.RouteOfAdministration", b =>
                {
                    b.HasOne("EPharm.Infrastructure.Entities.PharmaEntities.Pharmacy", null)
                        .WithMany("RouteOfAdministrations")
                        .HasForeignKey("PharmacyId");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.SideEffect", b =>
                {
                    b.HasOne("EPharm.Infrastructure.Entities.PharmaEntities.Pharmacy", null)
                        .WithMany("SideEffects")
                        .HasForeignKey("PharmacyId");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.SpecialRequirement", b =>
                {
                    b.HasOne("EPharm.Infrastructure.Entities.PharmaEntities.Pharmacy", "Pharmacy")
                        .WithMany("SpecialRequirements")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.UsageWarning", b =>
                {
                    b.HasOne("EPharm.Infrastructure.Entities.PharmaEntities.Pharmacy", null)
                        .WithMany("UsageWarnings")
                        .HasForeignKey("PharmacyId");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.Warehouse", b =>
                {
                    b.HasOne("EPharm.Infrastructure.Entities.PharmaEntities.Pharmacy", "Pharmacy")
                        .WithMany("Warehouses")
                        .HasForeignKey("PharmaCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.PharmaEntities.Pharmacy", b =>
                {
                    b.Navigation("ActiveIngredients");

                    b.Navigation("Allergies");

                    b.Navigation("DosageForms");

                    b.Navigation("Indications");

                    b.Navigation("Manufacturers");

                    b.Navigation("PharmacyStaff");

                    b.Navigation("Products");

                    b.Navigation("RegulatoryInformations");

                    b.Navigation("RouteOfAdministrations");

                    b.Navigation("SideEffects");

                    b.Navigation("SpecialRequirements");

                    b.Navigation("UsageWarnings");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.ActiveIngredient", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.Allergy", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.DosageForm", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.Indication", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.Manufacturer", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.Product", b =>
                {
                    b.Navigation("ActiveIngredients");

                    b.Navigation("Allergies");

                    b.Navigation("DosageForms");

                    b.Navigation("Indications");

                    b.Navigation("OrderProducts");

                    b.Navigation("RouteOfAdministrations");

                    b.Navigation("SideEffects");

                    b.Navigation("Stock");

                    b.Navigation("UsageWarnings");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.RegulatoryInformation", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.RouteOfAdministration", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.SideEffect", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.SpecialRequirement", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.UsageWarning", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EPharm.Infrastructure.Entities.ProductEntities.Warehouse", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("WarehouseProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
